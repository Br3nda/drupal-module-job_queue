<?php
// $Id: job_queue.module,v 1.1.2.3 2007/08/02 20:09:55 drumm Exp $

function job_queue_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/logs/job_queue',
      'title' => t('Queued jobs'),
      'description' => t('View a list of the queued jobs.'),
      'callback' => 'job_queue_list',
      'access' => user_access('view queued jobs'),
    );
  }

  return $items;
}

function job_queue_perm() {
  return array('view queued jobs');
}

function job_queue_requirements($phase) {
  $requirements = array();

  if ($phase == 'runtime') {
    $count = db_result(db_query('SELECT count(*) FROM {job_queue}'));
    $requirements['job_queue'] = array(
      'title' => t('Job queue'),
      'severity' => ($count > 0) ? REQUIREMENT_WARNING : REQUIREMENT_OK,
      'value' => ($count > 0) ? format_plural($count, 'There is <strong>@count</strong> queued job.', 'There are <strong>@count</strong> queued jobs.') : t('There are no queued jobs.'),
    );
  }

  return $requirements;
}

/**
 * Add a job to the queue. The function added will be called in the order it
 * was added during cron.
 *
 * @param $function The function name to call.
 * @param $description A human-readable description of the queued job.
 * @param $arguments Optional array of arguments to pass to the function.
 * @param $file Optional file path which needs to be included for $fucntion.
 */
function job_queue_add($function, $description, $arguments = array(), $file = '') {
  db_query("INSERT INTO {job_queue} (jqid, created, description, function, arguments, file) VALUES (%d, %d, '%s', '%s', '%s', '%s')", db_next_id('{job_queue}_jqid'), time(), $description, $function, serialize($arguments), $file);
}

/**
 * Dequeue and execute a queued job. Actions are logged via watchdog().
 *
 * @return TRUE if a job was dequeued, reguardless of success or failure
 *   executing. FALSE if the queue was empty.
 */
function job_queue_dequeue() {
  $result = db_query_range('SELECT jqid, description, function, arguments, file FROM {job_queue} ORDER BY jqid', 0, 1);
  if (db_num_rows($result) > 0) {
    $job = db_fetch_object($result);
    include_once $job->file;
    if (function_exists($job->function)) {
      call_user_func_array($job->function, unserialize($job->arguments));
      watchdog('job_queue', t('Ran queued job "!description"', array('!description' => $job->description)));
    }
    else {
      watchdog('job_queue', t('Failed to run queued job "!description" because the function %function is not defined.', array('!description' => $job->description, '%function' => $job->function)), WATCHDOG_ERROR);
    }
    db_query('DELETE FROM {job_queue} WHERE jqid = %d', $job->jqid);
    return TRUE;
  }
  return FALSE;
}

function job_queue_cron() {
  while (job_queue_dequeue()) {
    if ((timer_read('page') / 1000) > (ini_get('max_execution_time') / 2)) {
      break; // Stop once we have used over half of the maximum execution time.
    }
  }
}

function job_queue_list() {
  $count = db_result(db_query('SELECT count(*) FROM {job_queue}'));

  if ($count == 0) {
    $output = '<p>'. t('There are <strong>no queued jobs</strong>. Modules may programmatically add queued jobs.') .'</p>';
  }
  else {
    $output = '<p>'. format_plural($count, 'There is <strong>@count</strong> queued job.', 'There are <strong>@count</strong> queued jobs.') .'</p>';

    $header = array(
      t('Created'),
      t('Description'),
    );
    $result = pager_query('SELECT created, description FROM {job_queue} ORDER BY jqid', 20);
    $rows = array();
    while ($job = db_fetch_object($result)) {
      $rows[] = array(
        format_date($job->created),
        $job->description,
      );
    }
    $output .= theme('table', $header, $rows);
    $output .= theme('pager', array(), 20);
  }

  return $output;
}
